local levels =
{
{"l01_escape",                          "Cordon"},
{"l02_garbage",                         "Garbage"},
{"l03_agroprom",                      "Agroprom"},
{"l03u_agr_underground",  "Agroprom Underground"},
{"l04_darkvalley",               "Dark Valley"},
{"l04u_labx18",               "Laboratory Х-18"},
{"l05_bar",                                "Bar"},
{"l06_rostok",                          "Rostok"},
{"l08_yantar",                          "Yantar"},
{"l08u_brainlab",            "Laboratory Х-16"},
{"l07_military",             "Army Warehouses"},
{"l10_radar",                           "Radar"},
{"l10u_bunker",                        "Bunker"},
{"l11_pripyat",                       "Pripyat"},
{"l12_stancia",                        "Chernobyl-1"},
{"l12u_sarcofag",                    "Sarcophagus"},
{"l12u_control_monolith",   "Control Monolith"},
{"l12_stancia_2",                      "Chernobyl-2"}
}

class "list_item" (CUIListItemEx) --\\ отдельный класс для ItemList. Обязательное условие.

function list_item:__init() super()
	self:SetWndRect		(0,0,150,29)
	
	self.fn					= CUIStatic	()
	self.fn:SetAutoDelete	(true)          --включить автоудаление
	self:AttachChild		(self.fn)       --создать виджет
	self.fn:SetWndRect		(0,0,150,29)    --задать координаты и размеры виджета
	self.fn:SetText			("level_name")  --загрузить текст
	self.fn:SetTextY        (6)             --позиция отображения текста по Y
	self.fn:InitTexture("ui\\ui_btn_mm_h")  --загрузить текстуру
	self.fn:SetOriginalRect(0, 0, 255, 37)  --координаты захвата текстуры из указанного файла dds
	self.fn:SetStretchTexture(true)         --растяжка текстуры по размерам виджета
	self.fn:SetTextAlign(2)                 --центрировать текст
end

--\\-------------------------------------------------------
--\\ Скрипт мобильного чейнджера
--\\-------------------------------------------------------

class "mobile_changer" (CUIScriptWnd)

--инициализация
function mobile_changer:__init() super()
    local index_level = alife():level_id()
	self.name_level = alife():level_name(index_level)
    self:Init(50,50,900,640)
-----------------------------------------
-- интерфейс
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("_mobile_changer.xml")
	
	self.xml:InitStatic("background", self)

-- список локаций
	local list = self.xml:InitList("list", self)
	list:ShowSelectedItem(false)
	list:EnableScrollBar(true)
	self:Register(list, "list_window")
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked,		self) --клик по итему
	
	for k,v in ipairs(levels) do
	    local _itm	= list_item()  --\\ класс "list_item"
		local fn = _itm.fn         --\\ блок CUIStatic
	    fn:SetText( v[2] )
		if self.name_level == v[1] then
		    fn:InitTexture("ui\\ui_btn_mm_t")
			fn:SetOriginalRect(0, 0, 255, 37)
		end
		list:AddItem(_itm)
    end
	
-- блок ввода координат
    local vectors			      = CUIStatic	()
	vectors:SetAutoDelete	  (true)
	vectors:Init             (225,55,620,80)
	vectors:InitTexture      ("ui\\ui_frame_dialog_back")
	vectors:SetStretchTexture(true)
	self:AttachChild		      (vectors)
	
	local vector_x            = self.xml:InitStatic("vector_x", vectors)
	local vector_y            = self.xml:InitStatic("vector_y", vectors)
	local vector_z            = self.xml:InitStatic("vector_z", vectors)
	local vector_lv            = self.xml:InitStatic("vector_lv", vectors)
	local vector_gv            = self.xml:InitStatic("vector_gv", vectors)
	local vector_ln            = self.xml:InitStatic("vector_ln", vectors)
	
	
	
	self.vectorX                 = self.xml:InitEditBox ("edit", vector_x)
	self.vectorY                 = self.xml:InitEditBox ("edit", vector_y)
	self.vectorZ                 = self.xml:InitEditBox ("edit", vector_z)
	
	self.vectorLV                = self.xml:InitEditBox ("edit", vector_lv)
	self.vectorGV                = self.xml:InitEditBox ("edit", vector_gv)
	self.vectorLN                = self.xml:InitEditBox ("edit", vector_ln)
	self.vectorLN:SetWidth(250)
	self.vectorLN:SetText(self.name_level)
	
-- Enter
    local enter = self.xml:Init3tButton("enter", vectors)
	enter:EnableTextHighlighting(true)
	self:Register(enter,"enter_but")
	self:AddCallback("enter_but",		ui_events.BUTTON_CLICKED,	self.Enter,		self)

-- зона с изображениями
	local zone_pic =  CUIStatic	()
	zone_pic:SetAutoDelete	  (true)
	zone_pic:Init             (225,140,620,440)
	zone_pic:ClipperOn(true)
	self:AttachChild		      (zone_pic)
	
	local picX,picY,picW,picH = 30,5,128,96
	for i=1, 16 do
	    local fX,fY = 1,0
	    if i>4 and i<=8 then
		fX,fY = 5,1
		elseif i>8 and i<=12 then
		fX,fY = 9,2
		elseif i>12 then
		fX,fY = 13,3
		end
		local picXs = picX + (picW + 10) * (i-fX)
		local picYs = picY + (picH + 10) * fY
	    local pic = CUIStatic()
	    pic:SetAutoDelete	 (true)
		pic:SetWindowName    ("pic"..i)
	    pic:Init             (picXs,picYs,picW,picH)
		local fon = _change_list.jump_to_level(self.name_level, i)
		if fon then
		    pic:InitTexture      (fon['pic'])
			pic:SetOriginalRect(0, 0, 128, 96)
		else
		    pic:InitTexture      ("ui\\ui_frame_dialog_back") 
		end
	    pic:SetStretchTexture(true)
	    zone_pic:AttachChild (pic)
		
		local btn = CUIButton()
	    btn:SetAutoDelete	 (true)
		btn:SetWindowName    ("btn"..i)
	    btn:Init             (0,0,picW,picH)
		pic:AttachChild (btn)
		self:Register(btn)
	end
--колбеки изображений  
	self:AddCallback("btn1",		ui_events.BUTTON_CLICKED,	self.Btn_1,		self)
	self:AddCallback("btn2",		ui_events.BUTTON_CLICKED,	self.Btn_2,		self)
	self:AddCallback("btn3",		ui_events.BUTTON_CLICKED,	self.Btn_3,		self)
	self:AddCallback("btn4",		ui_events.BUTTON_CLICKED,	self.Btn_4,		self)
	self:AddCallback("btn5",		ui_events.BUTTON_CLICKED,	self.Btn_5,		self)
	self:AddCallback("btn6",		ui_events.BUTTON_CLICKED,	self.Btn_6,		self)
	self:AddCallback("btn7",		ui_events.BUTTON_CLICKED,	self.Btn_7,		self)
	self:AddCallback("btn8",		ui_events.BUTTON_CLICKED,	self.Btn_8,		self)
	self:AddCallback("btn9",		ui_events.BUTTON_CLICKED,	self.Btn_9,		self)
	self:AddCallback("btn10",		ui_events.BUTTON_CLICKED,	self.Btn_10,	self)
	self:AddCallback("btn11",		ui_events.BUTTON_CLICKED,	self.Btn_11,	self)
	self:AddCallback("btn12",		ui_events.BUTTON_CLICKED,	self.Btn_12,	self)
	self:AddCallback("btn13",		ui_events.BUTTON_CLICKED,	self.Btn_13,	self)
	self:AddCallback("btn14",		ui_events.BUTTON_CLICKED,	self.Btn_14,	self)
	self:AddCallback("btn15",		ui_events.BUTTON_CLICKED,	self.Btn_15,	self)
	self:AddCallback("btn16",		ui_events.BUTTON_CLICKED,	self.Btn_16,	self)
	
	self:Btn_print(1)
end

--функция выбора локации
function mobile_changer:OnListItemClicked()
    local list = self:GetListWnd("list_window") --\\определить list 	
	if list:GetSize()==0 then return end        --\\если лист пуст, то завершить выполнение функции
	
	local index = list:GetSelectedItem()        --\\определить индекс нажатого итема	
	if index == -1 then return end              --\\если не один индекс не активен, то завершить выполнение функции
	
	local item		= list:GetItem(index)       --\\определить CUI итема по индексу
	local text		= item.fn:GetText()         --\\определение текста итема
	
	list:RemoveAll()                            --\\очистим список
	
	for _,v in ipairs(levels) do
	    local _itm	= list_item()               --\\ класс "list_item"
		local fn    = _itm.fn                   --\\ блок CUIStatic
		fn:SetText(v[2])
		if text == v[2] then
		    fn:InitTexture("ui\\ui_btn_mm_t")
			fn:SetOriginalRect(0, 0, 255, 37)
			self.name_level = v[1]
		end
		list:AddItem(_itm)
	end
	
	for i=1,16 do
	    local zone = self:GetStatic("pic"..i)
        local fon = _change_list.jump_to_level(self.name_level, i)
		if fon then
		    zone:InitTexture      (fon['pic'])
			zone:SetOriginalRect(0, 0, 128, 96)
		else
		    zone:InitTexture      ("ui\\ui_frame_dialog_back")
		end		
	end
	self.vectorLN:SetText(self.name_level)
	self:Btn_print(1)
end

--функция старта телепортации (Enter)
function mobile_changer:Enter()
    local x = tonumber(self.vectorX:GetText())
	local y = tonumber(self.vectorY:GetText())
	local z = tonumber(self.vectorZ:GetText())
  --вывод ошибки в координатах
	if not x then level.start_stop_menu(_mobil_changer.wind_error("Error in the coordinate Х"), true) return
	elseif not y then level.start_stop_menu(_mobil_changer.wind_error("Error in the coordinate Y"), true) return
	elseif not z then level.start_stop_menu(_mobil_changer.wind_error("Error in the coordinate Z"), true) return
	end
    if alife():level_name(alife():level_id()) == self.name_level then
	    self:on_quit()
	    db.actor:set_actor_position(vector():set(x,y,z))		
	else
	  --вывод ошибки в вертексах и имени локации
	    local lv = tonumber(self.vectorLV:GetText())
	    local gv = tonumber(self.vectorGV:GetText())
		local lev = self.vectorLN:GetText()
		if not lv then level.start_stop_menu(_mobil_changer.wind_error("Error in the coordinate LV"), true) return
	    elseif not gv then level.start_stop_menu(_mobil_changer.wind_error("Error in the coordinate GV"), true) return
	    elseif not lev then level.start_stop_menu(_mobil_changer.wind_error("Error in name of location"), true) return
	    end
	    self:on_quit()
	    this.start_level_changer(vector():set(x,y,z), lv, gv, lev)
	end
end

--клава
function mobile_changer:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end

--выбор секции с координатами
function mobile_changer:Btn_1() self:Btn_print(1) end
function mobile_changer:Btn_2() self:Btn_print(2) end
function mobile_changer:Btn_3() self:Btn_print(3) end
function mobile_changer:Btn_4() self:Btn_print(4) end
function mobile_changer:Btn_5() self:Btn_print(5) end
function mobile_changer:Btn_6() self:Btn_print(6) end
function mobile_changer:Btn_7() self:Btn_print(7) end
function mobile_changer:Btn_8() self:Btn_print(8) end
function mobile_changer:Btn_9() self:Btn_print(9) end
function mobile_changer:Btn_10() self:Btn_print(10) end
function mobile_changer:Btn_11() self:Btn_print(11) end
function mobile_changer:Btn_12() self:Btn_print(12) end
function mobile_changer:Btn_13() self:Btn_print(13) end
function mobile_changer:Btn_14() self:Btn_print(14) end
function mobile_changer:Btn_15() self:Btn_print(15) end
function mobile_changer:Btn_16() self:Btn_print(16) end

function mobile_changer:Btn_print(index)
    local data = _change_list.jump_to_level(self.name_level, index)
	if data then
	    self.vectorX:SetText(data["pos_x"])
	    self.vectorY:SetText(data["pos_y"])
	    self.vectorZ:SetText(data["pos_z"])
	    self.vectorLV:SetText(data["lvid"])
	    self.vectorGV:SetText(data["gvid"])
	else
	    self.vectorX:SetText('')
	    self.vectorY:SetText('')
	    self.vectorZ:SetText('')
	    self.vectorLV:SetText('')
	    self.vectorGV:SetText('')
	end
	
	for i=1,16 do
	    local btn = self:GetButton("btn"..i)
		if index == i then
		    btn:InitTexture("ui\\ramka")
		else
		    btn:InitTexture("ui\\clear")
		end
	end
end

--выход
function mobile_changer:on_quit()
	self:GetHolder():start_stop_menu (self,true)
end

--\\---------------------------------------------
--\\ Окно ошибки координат
--\\---------------------------------------------

class "wind_error" (CUIScriptWnd)

function wind_error:__init(n) super()
    self:Init(380,300,345,212)
	
	self.fon = CUIStatic()
	self.fon:Init(0,0,345,212)
	self.fon:InitTexture("ui\\ui_trade_list_back")
	self.fon:SetText("Error")
	self.fon:SetTextX(30)
	self.fon:SetTextY(10)
	self.fon:SetTextAlign(0)
	self:AttachChild (self.fon)
	
	self.text = CUIStatic()
	self.text:Init(0,60,345,30)
	self.text:SetText(n)
	self.text:SetTextAlign(2)
	self.fon:AttachChild (self.text)
	
	self.btn = CUI3tButton ()
	self.btn:Init("ui\\ui_btn_02", 150,150,45,26)
	self.btn:SetText("OK")
	self:Register(self.btn, "btn")
	self:AddCallback("btn",		ui_events.BUTTON_CLICKED,	self.Btn,		self)
	self.fon:AttachChild (self.btn)
end

function wind_error:Btn()
    self:GetHolder():start_stop_menu (self,true)
end

--\\--------------------------------------------------------------------
--\\ Скрипт временного Чейнджера
--\\--------------------------------------------------------------------

function start_level_changer(p_dest_pos, p_dest_lv, p_dest_gv, p_dest_level)
	local obj = alife():create("level_changer", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	local packet = net_packet()
	obj:STATE_Write(packet)
-- свойства cse_alife_object
    local game_vertex_id     = packet:r_u16()
    local distance           = packet:r_float()
    local direct_control     = packet:r_u32()
    local level_vertex_id    = packet:r_u32()
    local object_flags       = packet:r_u32()
    local custom_data        = packet:r_stringZ()
    local story_id           = packet:r_u32()
    local spawn_story_id     = packet:r_u32()
-- свойства cse_shape
    local shape_count = packet:r_u8()
    for i=1,shape_count do
        local shape_type = packet:r_u8()
        if shape_type == 0 then
    -- sphere
            local center = packet:r_vec3()
            local radius = packet:r_float()
        else
    -- box
			local axis_x                = packet:r_vec3()
			local axis_y                = packet:r_vec3()
			local axis_z                = packet:r_vec3()
			local offset                = packet:r_vec3()
        end
    end
	-- свойства cse_alife_space_restrictor
	local restrictor_type 			= packet:r_u8()
	-- свойства cse_alife_level_changer
	local dest_game_vertex_id		= packet:r_u16()  
	local dest_level_vertex_id 		= packet:r_u32()  
	local dest_position 			= packet:r_vec3()
	local dest_direction 			= packet:r_vec3()
	local dest_level_name 			= packet:r_stringZ()
	local dest_graph_point 			= packet:r_stringZ()
	local silent_mode 			    = packet:r_u8()
 
 -----------------------------------------------------------
	packet:w_begin(game_vertex_id)
	packet:w_float(distance)
	packet:w_u32(direct_control) 
	packet:w_u32(level_vertex_id)
	packet:w_u32( bit_not(193) )
	packet:w_stringZ(custom_data)
    packet:w_u32(46489)
	packet:w_u32(46489)
    packet:w_u8(1)
    packet:w_u8(0)
    packet:w_vec3(vector():set(0, 0, 0))
    packet:w_float(2)
	packet:w_u8(3)
	packet:w_u16(p_dest_gv)
	packet:w_u32(p_dest_lv)	
	packet:w_vec3(p_dest_pos)
	packet:w_vec3(vector():set(0, 0, 0))
	packet:w_stringZ(p_dest_level)
	packet:w_stringZ("start_actor_99")
	packet:w_u8(1)
 
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

function start_del()
    local obj =  alife():story_object( 46489 )
	if obj then
	    db.actor:set_fastcall(del_changer, db.actor)
	end
end

function del_changer()
	local obj =  alife():story_object( 46489 )
		if obj then
	        local lv_ch = game_graph():vertex(obj.m_game_vertex_id):level_id() --определяем id локации нахождения временного чейнджера
		    local lv_ac = alife():level_id()                                   --определяем id текущей локации
		    if lv_ch ~= lv_ac then                                             --если не равны
	            alife():release(obj, true)                                     --то удаляем временный чейнджер
            end
	    end
end

start_del()